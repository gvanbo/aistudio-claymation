# Cursor AI Agent Configuration for AI Studio Claymation Ticket System

## Context

You are working with a multi-agent ticket system where:

- Tickets are XML files in aistudio-claymation/tools/ticket-system/active/development/
- Agents process tickets asynchronously using Python
- Each agent has specific responsibilities (react-components, ai-integration, animation, testing, deployment)
- Focus on React/TypeScript development, AI Studio integrations, and animation tools

## Agent Specializations

### AI Studio Claymation Agent Specializations

#### React Component Developer Agent
- Create and maintain React/TypeScript components
- Implement responsive UI designs and user interactions
- Handle state management and component lifecycle

#### AI Integration Agent
- Integrate with Google AI Studio and Gemini API
- Manage prompt generation and AI model interactions
- Handle API responses and error management

#### Animation Developer Agent
- Create claymation and animation effects
- Implement character and background systems
- Handle animation timing and transitions

#### Testing Agent
- Write and maintain Jest unit tests
- Perform component testing and integration testing
- Validate AI integration functionality

## Working with Tickets

When working with ticket XML files:

1. Parse the XML structure to understand requirements
2. Identify functional, technical, and non-functional requirements
3. Map requirements to appropriate agents
4. Check dependencies and blocking relationships
5. Update ticket status and progress

## Code Patterns

### Async Agent Pattern

```python
async def process_ticket(self, ticket_data: dict) -> Dict[str, Any]:
    # Update progress
    self.update_ticket_progress("in_progress", "Starting processing")

    # Process requirements
    results = await self.process_requirements(ticket_data)

    # Update final status
    self.update_ticket_progress("completed", "Processing complete")

    return results
```

### Ticket Status Updates

```python
def update_ticket_progress(self, status: str, details: str):
    # Update XML with progress information
    # Add timestamps and agent attribution
    # Maintain audit trail
```

## File Organization

- Keep agent code in HTML/agents/{agent-type}/
- Store tickets in HTML/tools/ticket-system/active/{team}/
- Use consistent naming: NSA-YYYY-NNN-description.xml
- Maintain schemas in HTML/tools/ticket-system/schemas/

## Best Practices

1. Always check ticket dependencies before processing
2. Update ticket progress with detailed status information
3. Use proper error handling and logging
4. Maintain backward compatibility with existing workflows
5. Document all changes and new features

## Quick Commands

### /analyze-ticket

Analyze the current ticket file and provide:

- Requirements breakdown
- Agent assignment recommendations
- Implementation suggestions
- Risk assessment

### /generate-agent

Create a {agent_type} agent implementation for the current ticket that:

- Follows the established patterns
- Handles all requirements
- Includes proper error handling
- Provides comprehensive testing

### /review-implementation

Review the current agent implementation for:

- Async best practices
- Error handling patterns
- Code quality and documentation
- Performance considerations
